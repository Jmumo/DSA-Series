import java.util.*;
class Main {
    public static void main(String[] args) {
        
        int [] nums = {1,2,3,4,5,6,7,8,9};
        
        System.out.println(findAveragesOfSubarrays(3,nums));
    }
    
      public static List<Double> findAveragesOfSubarrays(int k, int[] nums) {
        List<Double> result = new ArrayList<>();
        double windowSum = 0;
        int windowStart = 0;

        for (int windowEnd = 0; windowEnd < nums.length; windowEnd++) {
            windowSum += nums[windowEnd]; // Add the next element to the window

            // Slide the window once we hit size 'k'
            if (windowEnd >= k - 1) {
                result.add(windowSum / k); // Calculate and store the average
                windowSum -= nums[windowStart]; // Remove the element going out of the window
                windowStart++; // Slide the window ahead
            }
        }

        return result;
    }
}




// second method



import java.util.*;


class Main {
    public static void main(String[] args) {
       int [] nums = {1, 3, 2, 6, -1, 4, 1, 8, 2};
       int k = 5;
        System.out.println(AvarageOfSubK(nums,k));
    }
    
    public static List<Double> AvarageOfSubK(int [] nums , int k){
        List<Double> results = new ArrayList<>();
        double average = 0.0;
        double sum = 0.0;
        for (int i = 0 ; i < k;i++){
            sum += nums[i];
        }
        average = sum/k;
        results.add(average);
        
        for (int i = k; i < nums.length; i ++){
            sum += nums[i] - nums[i - k];
            average = sum/k;
            results.add(average);
        }
        
        return results;
    }
}


Given an integer array nums and an integer k, return an array of the averages of each contiguous subarray of length k.
